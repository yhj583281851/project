/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2018-12-05 03:01:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>    \r\n");
      out.write("        <meta charset=\"utf-8\">    \r\n");
      out.write("        <title>假装这是注册页面</title>    \r\n");
      out.write("        <style>  \r\n");
      out.write("        video,canvas{  \r\n");
      out.write("            border:1px solid gray;  \r\n");
      out.write("            width:400px;  \r\n");
      out.write("            height:400px;  \r\n");
      out.write("            border-radius:50%;  \r\n");
      out.write("        }     \r\n");
      out.write("        </style>  \r\n");
      out.write("    </head>    \r\n");
      out.write("    <body>    \r\n");
      out.write("       <video autoplay style=\"position: absolute;left: 1%;display: none;\"></video>  \r\n");
      out.write("        <canvas id=\"myCanvas\" style=\"position: absolute;left: 50%;\"></canvas>\r\n");
      out.write("        <input type=\"text\" id=\"name\" style=\"position:  absolute;left: 30%;top: 15%\" placeholder=\"请填入您的账号\">  \r\n");
      out.write("        <button id=\"capture\" style=\"position: absolute;left: 30%;top: 25%\">拍照上传</button>\r\n");
      out.write("      <!--   <input type=\"file\" name=\"file\"  style=\"position: absolute;left: 30%;top: 35%\" >\r\n");
      out.write("        <button style=\"position: absolute;left: 30%;top: 45%\">图片上传</button>\r\n");
      out.write(" -->   \r\n");
      out.write("       <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n");
      out.write("        <script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("        function hasUserMedia(){//判断是否支持调用设备api，因为浏览器不同所以判断方式不同哦    \r\n");
      out.write("            return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);    \r\n");
      out.write("        }    \r\n");
      out.write("        if(hasUserMedia()){    \r\n");
      out.write("            //alert(navigator.mozGetUserMedia)    \r\n");
      out.write("            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;    \r\n");
      out.write("            var video=document.querySelector(\"video\");    \r\n");
      out.write("            var canvas=document.querySelector(\"canvas\");  \r\n");
      out.write("            var streaming = false;  \r\n");
      out.write("            navigator.getUserMedia({    \r\n");
      out.write("                video:true,//开启视频    \r\n");
      out.write("                audio:false//先关闭音频，因为会有回响，以后两台电脑通信不会有响声    \r\n");
      out.write("            },function(stream){//将视频流交给video    \r\n");
      out.write("                video.src=window.URL.createObjectURL(stream);     \r\n");
      out.write("                streaming = true;  \r\n");
      out.write("            },function(err){    \r\n");
      out.write("                console.log(\"capturing\",err)    \r\n");
      out.write("            });    \r\n");
      out.write("            document.querySelector(\"#capture\").addEventListener(\"click\",function(event){  \r\n");
      out.write("                if(streaming){  \r\n");
      out.write("                    //alert(video.clientHeight)  \r\n");
      out.write("                    //canvas.width = video.clientWidth;  \r\n");
      out.write("                    //canvas.height= video.clientHeight;  \r\n");
      out.write("                    canvas.width = 800;  \r\n");
      out.write("                    canvas.height = 800;  \r\n");
      out.write("                    var context = canvas.getContext('2d');  \r\n");
      out.write("                    imgString = canvas.toDataURL(\"image/png\")\r\n");
      out.write("                    context.drawImage(video,20,20)  \r\n");
      out.write("\r\n");
      out.write("                    var info = {\r\n");
      out.write("                        name: $(\"#name\").val(),\r\n");
      out.write("                        imgString: canvas.toDataURL(\"image/png\")\r\n");
      out.write("                      }\r\n");
      out.write("\r\n");
      out.write("                    $.post(\"/face/photograph\",info,function(data){\r\n");
      out.write("\r\n");
      out.write("                            alert(data.message)\r\n");
      out.write("\r\n");
      out.write("                  },\"json\") \r\n");
      out.write("                }  \r\n");
      out.write("            })  \r\n");
      out.write("        }else{    \r\n");
      out.write("            alert(\"浏览器暂不支持\")    \r\n");
      out.write("        }    \r\n");
      out.write("        </script>   \r\n");
      out.write("\r\n");
      out.write("    </body>    \r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
